'' =================================================================================================
''
''   File....... demo_dual_motor_rc.spin2
''   Purpose.... Demonstrate R/C driving of a two-wheeled platform
''   Authors.... Stephen M Moraco
''               -- Copyright (c) 2022 Iron Sheep Productions, LLC
''               -- see below for terms of use
''   E-mail..... stephen@ironsheep.biz
''   Started.... Mar 2022
''   Updated.... 04 May 2022
''   Updated.... 26 Aug 2023 (timmoore)
''                              move sbus to pin 55
''                              add frsky s.port (pin 54) telemetry
''                                send motor current telemetry
''                              add resistor divider and ADC
''                                      22.2V input to 5V convertor
''                                      |
''                                      20K (19K93, 0.35%)
''                                      |______________
''                                      |              |
''                                      3K(3K003 0.1%) |
''                                      |              |
''                                      gnd            48
''                                send battery voltage telemetry
''                              stop motors and shutdown if min battery reached
''   Updated.... 4 Sept 2023 (timmoore)
''                              force speed to 0 when joysticks are disabled
''                              add deadband to speed, if very slow bot jerks, so have a minimum speed
''   Updated.... 8 Sept 2023 (timmoore)
''                              connect VRA to setAcceleration
''
'' =================================================================================================

CON { timing }

  CLK_FREQ = 270_000_000                                        ' system freq as a constant
  _clkfreq = CLK_FREQ                                           ' set system clock

CON {debug}
  DEBUG_LOG_SIZE = 500_000

CON { fixed io pins }

  RX1      = 63  { I }                                          ' programming / debug
  TX1      = 62  { O }

  SF_CS    = 61  { O }                                          ' serial flash
  SF_SCK   = 60  { O }
  SF_SDO   = 59  { O }
  SF_SDI   = 58  { I }

  'LA_CHAN0 = 56  { O }                                          ' logic analyzer
  'LA_CHAN1 = 57  { O }

  SBUS_RX  = 55  { I }                                          ' RC receiver SBUS channels
  SPORT_BI = 54  { I/O }                                        ' RC receiver SPORT telemetry

  BATTERY_ANALOG                = 48 {I}                        ' battery via resistor divider, 20K + 3K
  BATTERY_LOW                   = 0
  BATTERY_HIGH                  = 31427                         ' 19K93 + 3K003 resistor divider, max voltage is 24V * 3003/22933 -> 3.1427
  BATTERY_DIVIDER               = 1232.0                        ' value that makes reading match meter, battery max is 4.2V per cell (total 22.2V)
  BATTERY_MINIMUM               = 16.0                          ' minimum voltage, battery min is 3.2V per cell (total 16.0V)
  BATTERY_STOP                  = true                          ' shutdown if min battery reached

  DEADBAND                      = 1                             ' ignore speeds slower than this
  MOTOROFFONIGNOREJOYSTICK      = true

OBJ { our Drive Subsystem }

                                                    ' 1 cog, total -> 6 cogs
    user        : "isp_bldc_motor_userconfig"       ' driver configuration
    wheels      : "isp_steering_2wheel"             ' the dual-drive BLDC motors, 1 cog per motor, 1 sense cog -> 3 cogs
    remoteCtl   : "isp_flysky_rx"                   ' the FlySky Transmitter, 1 cog
    battery     : "jm_ez_analog"                    ' A2D to read battery voltage
    telemetry   : "frskysport"                      ' bidirectional serial port to RC receiver for telemetry, 1 cog

VAR
    long    remoteCog, telemetryCog

PUB main() | statusOK, status1OK, basePinLt, basePinRt, voltage, motor, detectModeLt, detectModeRt
'' DEMO Driving a two wheeled platform

    debug("* demo dual motor control via R/C")

    ' validate user settings/choicess
    '  do NOT start motor unless all are legit!
    basePinLt := wheels.validBasePinForChoice(user.LEFT_MOTOR_BASE)
    basePinRt := wheels.validBasePinForChoice(user.RIGHT_MOTOR_BASE)
    detectModeLt := wheels.validDetectModeForChoice(user.LEFT_BOARD_TYPE)
    detectModeRt := wheels.validDetectModeForChoice(user.RIGHT_BOARD_TYPE)
    voltage := wheels.validVoltageForChoice(user.DRIVE_VOLTAGE)
    motor := wheels.validMotorForChoice(user.MOTOR_TYPE)

    if basePinLt <> wheels.INVALID_PIN_BASE and basePinRt <> wheels.INVALID_PIN_BASE and voltage <> wheels.INVALID_VOLTAGE and motor <> wheels.INVALID_MOTOR and detectModeLt <> wheels.INVALID_DET_MODE and detectModeRt <> wheels.INVALID_DET_MODE
        ' start our dual motor driver

        ' start our motor drivers (left and right)
        wheels.start(basePinLt, basePinRt, voltage, detectModeLt, detectModeRt)

        ' override defaults, use 100 %
        wheels.setMaxSpeed(100)
        'wheels.setMaxSpeedForDistance(100)
        ' just don't draw current at stop
        wheels.holdAtStop(false)

        ' ---- TEST TEST TEST ----
        'remoteCtl.manualCalibrate()
        'debug("-- HOLD --")
        'repeat  ' hold here for now
        ' ---- TEST TEST TEST ----

        debug("* Set up - remote control")

        battery.start(BATTERY_ANALOG, BATTERY_LOW, BATTERY_HIGH)
        remoteCog := remoteCtl.starttx(SBUS_RX, @ctlMinValue, @ctlMaxValue, @validswitches, @valid3Ways, remoteCtl.MAX_CTLS)
        telemetryCog := telemetry.start(SPORT_BI)
        statusOK := remoteCog <> 0 ? TRUE : FALSE
        status1Ok := telemetryCog <> 0 ? TRUE : FALSE
        if statusOK and status1Ok
            'remoteCtl.manualCalibrate()
            debug("R/C Running...")
            remoteControlMotor()
        else
            if statusOK == false
              debug("EEEE: SBUS rcvr not started?!")
            if status1OK == false
              debug("EEEE: SPORT not started?!")

        telemetry.stop()
        ' turn off our SBUS drivers
        remoteCtl.stop()
        battery.stop()
        ' turn off our motor drivers
        wheels.stop()
    else
        debug("* ERROR user configuration NOT valid!")

    debug("* DONE")

{
PRI waitUntilMotorReady()
    if wheels.isReady() == false
        debug("* wait motors ready...")
        repeat
            if wheels.isReady()
                quit
            else
                waitms(2)
    debug("* Motors ready, let's drive!")


PRI waitUntilMotorDone()
    if wheels.isStarting() == false
         debug("* wait until motors start...")
         repeat
            if wheels.isStarting()
                quit
            else
                waitms(2)

    if wheels.isStopped() == false
        debug("* wait until motors finish...")
        repeat
            if wheels.isStopped()
                quit
            else
                waitms(2)
    debug("* Motors stopped!")
'}

CON

   VALUE_NOT_SET = -2

VAR

    long    priorSpeed
    long    priorDirection
    long    rcSpeed
    long    rcDirection
    long    nLtmAmps
    long    nLtmWatts
    long    nRtmAmps
    long    nRtmWatts

    long    bLastShowState
    long    bLastEmerCutoff
    long    bLastIgnoreJoyStks
    long    bLastShowDriveStates
    long    nAccelerationRate

PUB remoteControlMotor() | bIgnoreJoySticks, bDoneTesting, bShowState, {loopCt,} bShowDebugStatus, bEmerCutoff, bShowDriveStates, fvoltage, bMinBattery, finalupdate, accrate
'' Listen to FlySky and control motor, get status based on Switch/Joystick inputs
    waitms(500)    ' wait for 1/2 sec for backend to catch up

    debug("------")
    debug("- Lt Joy Hz - direction")
    debug("- Rt Joy Vt - speed")
    debug("------")
    debug("* swA DN     - enable joystick servo control")
    debug("* swB Toggle - show state")
    'debug("* swC UP     - ---")
    'debug("* swC MID    - ---")
    debug("* swC DN     - end control")
    debug("* swD DN     - emer cutoff")
    debug("* VRA        - acceleration")
    debug("------")

    bLastShowState := VALUE_NOT_SET                     ' value can't happen
    bLastIgnoreJoyStks := VALUE_NOT_SET                 ' value can't happen
    bLastEmerCutoff := VALUE_NOT_SET                    ' value can't happen
    bLastShowDriveStates := VALUE_NOT_SET               ' value can't happen

    'loopCt := 0
    repeat
        'debug("* ", udec_long(loopCt))
        bShowDebugStatus := FALSE or bMinBattery 'loopCt < 2 ? TRUE : FALSE
        'remoteCtl.showDebug(bShowDebugStatus)

        ' SwA Ignore JoySticks
        'debug("-- -- SW -- --")
        bIgnoreJoySticks := remoteCtl.swIsOn(remoteCtl.CTL_SW_A) or bMinBattery
        bShowState := remoteCtl.swIsOff(remoteCtl.CTL_SW_B) or bMinBattery      ' show drive current if minbattery
        ' SwC done, end loop!
        bDoneTesting := remoteCtl.swIsOff(remoteCtl.CTL_SW_C) or bMinBattery    ' exit drive loop if minbattery
        bShowDriveStates := remoteCtl.swIsMiddle(remoteCtl.CTL_SW_C) or bMinBattery
        ' SwD down = Emergency Cutoff
        remoteCtl.showDebug(bShowDebugStatus)
        bEmerCutoff := remoteCtl.swIsOff(remoteCtl.CTL_SW_D) or bMinBattery     ' emergency cutoff drive if minbattery
        remoteCtl.showDebug(FALSE)

        accrate := remoteCtl.readchannel(remoteCtl.CTL_VRA)/10

        if bLastShowDriveStates <> bShowDriveStates
            debug("- sho ", sdec_long_(bShowDriveStates))
            if bShowDriveStates
                wheels.showDriveStates()
            bLastShowDriveStates := bShowDriveStates

        nLtmAmps, nLtmWatts, nRtmAmps, nRtmWatts := wheels.getCurrent()
        if bShowState <> bLastShowState
            if bShowState
                debug("  ltmA=", sdec_(nLtmAmps/10), ".", sdec_(nLtmAmps//10), ", rtmA=", sdec_(nRtmAmps/10), ".", sdec_(nRtmAmps//10))
                debug("  ltmW=", sdec_(nLtmWatts), ", rtmW=", sdec_(nRtmWatts))
            bLastShowState := bShowState

        if bEmerCutoff <> bLastEmerCutoff
            'debug("  NEW E VALUE")
            if bEmerCutoff
                debug("-------  Motor E-OFF")
                wheels.emergencyCutoff()
            else
                wheels.clearEmergency()
                if not bIgnoreJoySticks
                    debug("  Motor Enabled")
                else
                    debug("  Motor Disabled")
                    finalupdate := true
            bLastEmerCutoff := bEmerCutoff

        if not bShowDebugStatus and bLastIgnoreJoyStks <> bIgnoreJoySticks
            if bIgnoreJoySticks
                debug("  Motor CTL OFF")
                finalupdate := true
            else
                debug("  Motor CTL enabled")
            bLastIgnoreJoyStks := bIgnoreJoySticks

        if accrate <> 0 and nAccelerationRate <> accrate
            nAccelerationRate := accrate
            debug("  Setting Motor Acceleration:", sdec(nAccelerationRate))
            wheels.setAcceleration(nAccelerationRate)

        if not bEmerCutoff
            rcSpeed, rcDirection := updPosnBothJoy()
            rcDirection := -rcDirection                                         ' invert this to apply to our motors
            ifnot bIgnoreJoySticks
                if priorDirection <> rcDirection or priorSpeed <> rcSpeed
                    debug("- JOY ", sdec_long(rcSpeed), sdec_long(rcDirection))
                    wheels.driveDirection(rcSpeed, rcDirection)
                    priorDirection := rcDirection
                    priorSpeed := rcSpeed
            elseif finalupdate                                                  ' make sure we do a final speed/direction update on disable joystick
                if MOTOROFFONIGNOREJOYSTICK                                     ' depending on whether want to stop if disable joystick
                    rcSpeed := 0
                ' if we were running when motors control stopped then allow a stop when it happens
                debug("- JOY (last) ", sdec_long(rcSpeed), sdec_long(rcDirection))
                wheels.driveDirection(rcSpeed, rcDirection)
                priorDirection := rcDirection
                priorSpeed := rcSpeed
                finalupdate := false

        telemetry.setvoltage(fvoltage := (float(battery.read())/.BATTERY_DIVIDER)) ' battery voltage telemetry
        telemetry.setcurrent(nLtmAmps, nRtmAmps)
        'if fvoltage <. BATTERY_MINIMUM                                         ' <. doesn't work, floating point comparisons do not work
        if round(fvoltage*.10.0) < round(BATTERY_MINIMUM*.10.0)
            debug("--> Minimum Battery Voltage ", fdec(fvoltage))
            bMinBattery := BATTERY_STOP                                         ' trigger emergency stop and quit the loop
        'debug("--> Battery Voltage ", fdec(fvoltage), fdec(BATTERY_MINIMUM))

        if bDoneTesting
            debug("--> quit loop")
            quit

        waitms(250) ' wait 1/4 second, before next loop
        'loopCt++

    ' done, stop our motors
    wheels.stop()

PRI updPosnBothJoy(): speed, direction | rawSpeed, rawDirection, rngMin, rngMax
    ' route Rt Joystick Vt (spring center) to FWD/REV (speed)
    'debug("-- JOY -- JOY --")
    rawSpeed := remoteCtl.readChannel(remoteCtl.CTL_RT_JOY_VT)
    rngMin, rngMax := remoteCtl.chanMinMax(remoteCtl.CTL_RT_JOY_VT)
    speed := map(rawSpeed, rngMin, rngMax, -100, +100)
    if abs(speed) < DEADBAND
      speed := 0

    ' route Lt Joystick Hz (spring center) to direction
    rawDirection := remoteCtl.readChannel(remoteCtl.CTL_LT_JOY_HZ)
    rngMin, rngMax := remoteCtl.chanMinMax(remoteCtl.CTL_LT_JOY_HZ)
    direction := map(rawDirection, rngMin, rngMax, -100, +100)

PRI map(inValue,  inMin,  inMax,  outMin,  outMax) : outValue
{
    REF: https://www.arduino.cc/reference/en/language/functions/math/map

    Re-maps a number from one range to another. That is, a value of fromLow would get mapped to toLow,
    a value of fromHigh to toHigh, values in-between to values in-between, etc.

    Does not constrain values to within the range, because out-of-range values are sometimes intended and
    useful. The constrain() function may be used either before or after this function, if limits to the ranges are desired.

    Note that the "lower bounds" of either range may be larger or smaller than the "upper bounds" so the
    map() function may be used to reverse a range of numbers, for example

    y = map(x, 1, 50, 50, 1);

    The function also handles negative numbers well, so that this example

    y = map(x, 1, 50, 50, -100);

    is also valid and works well.

    The map() function uses integer math so will not generate fractions, when the math might indicate that
    it should do so. Fractional remainders are truncated, and are not rounded or averaged.
}
    if (inValue <= inMin)
        outValue := outMin
    elseif (inValue >= inMax)
        outValue :=  outMax
    else
        outValue := (inValue - inMin) * (outMax - outMin) / (inMax - inMin) + outMin

DAT
'' rc transmitter configuration
    ctlMinValue     word    0,  172,  172,  172,  172,  172,  172,  172,  172,  172,  172
    ctlMaxValue     word    0, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810, 1810
    validswitches   byte    remoteCtl.CTL_SW_A, remoteCtl.CTL_SW_B, remoteCtl.CTL_SW_C, remoteCtl.CTL_SW_D, remoteCtl.CTL_NADA
    valid3Ways      byte    remoteCtl.CTL_SW_A, remoteCtl.CTL_SW_B, remoteCtl.CTL_SW_C, remoteCtl.CTL_SW_D, remoteCtl.CTL_NADA

CON { license }
{{

 -------------------------------------------------------------------------------------------------
  MIT License

  Copyright (c) 2022 Iron Sheep Productions, LLC

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 =================================================================================================
}}