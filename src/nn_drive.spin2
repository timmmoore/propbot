{ Neural Network
  port of
        http://robotics.hobbizine.com/arduinoann.html
  Also read
        https://mattmazur.com/2015/03/17/a-step-by-step-backpropagation-example/

  Only drive capability

  To train and generate NN weights use either
        nn_training.spin2
  or (recommended)
        https://github.com/timmoore/propbot/trainer
}

CON
' needs to match training data and generated weights
InputNodes      = 5                                                             ' input nodes, 1 per lidar input
HiddenNodes     = 6                                                             ' hidden nodes
OutputNodes     = 2                                                             ' output nodes, 1 per motor

OBJ
  utilities     : "utilities"

VAR
  long fHidden[HiddenNodes]                                                     ' hidden values
  long fOutput[OutputNodes]                                                     ' output values

DAT
' training data from Spin2_weight_trainer
' run the training data using the Spin2_weight_trainer. Copy and paste the results here
'
' The first are weights for the hidden nodes:  (InputNodes+1)  * HiddenNodes
' The second are weights for the output nodes: (HiddenNodes+1) * OutputNodes
'
' from spin2 trainer: nn_train.spin2
'{
fHiddenWeights
long 1.074378e-01
long -2.618973e+00
long -8.017249e-01
long -1.605691e+00
long -5.438482e-01
long 9.610894e-01

long -8.995779e-01
long -1.199365e+00
long -2.046993e+00
long 1.571164e+00
long -2.932147e-01
long 3.554947e-01

long 7.862390e-01
long -6.490445e-01
long 9.057328e+00
long 6.127009e-01
long 7.133089e-01
long -1.634628e+00

long -7.902029e-01
long -1.308742e+00
long -2.093864e+00
long 6.883631e-01
long -5.588447e-01
long 2.617458e-01

long -3.925641e-01
long -2.150220e+00
long -2.860991e-01
long -2.183831e+00
long -1.059482e+00
long 9.454644e-01

long 7.786440e-01
long 5.583652e+00
long -1.932532e+00
long -9.387718e-01
long 9.730888e-01
long 6.240403e-01
fEndHiddenWeights

fOutputWeights
long 3.028817e-01
long 2.604457e+00

long 4.724762e+00
long 4.384694e+00

long -6.097480e+00
long -5.727854e+00

long 3.511851e+00
long -1.085837e+00

long 1.460946e+00
long 2.221208e+00

long -2.188089e+00
long -2.902344e+00

long -5.984973e-01
long -6.601086e-01
fEndOutputWeights
'}
{
' from PC trainer
fHiddenWeights
long -0.771484375
long  1.359375
long  0.45068359375
long  -1.74609375
long  -0.356201171875
long  -1.220703125

long  0.169189453125
long  -0.26416015625
long  -1.35546875
long  -1.21484375
long  0.54443359375
long  -0.65869140625

long  1.189453125
long  -1.05078125
long  -0.397216796875
long  7.68359375
long  -0.4580078125
long  0.9111328125

long  1.0556640625
long  -0.1793212890625
long  -1.04296875
long  -1.57421875
long  0.99951171875
long  -0.0469970703125

long  -4.0
long  1.81640625
long  0.755859375
long  -1.22265625
long  -0.415771484375
long  -0.68701171875

long  1.3857421875
long  -1.1259765625
long  2.0
long  -1.197265625
long  -0.0611572265625
long  1.220703125
fEndHiddenWeights

fOutputWeights
long 4.00390625
long  2.462890625

long  -3.546875
long  -2.0

long  -1.044921875
long  2.638671875

long  -5.7890625
long  -4.63671875

long  0.6484375
long  -2.0

long  2.06640625
long  2.962890625

long  1.482421875
long  -0.8515625
fEndOutputWeights
'}

pub null()

pub start() : result
' 0 is ok
  ' size of weight table must match expected based on node sizes
  if (@fEndHiddenWeights-@fHiddenWeights)/4 <> (InputNodes+1)*HiddenNodes
    debug(" Hidden weight size mis-match ", udec((fEndHiddenWeights-fHiddenWeights)/4), " ", udec((InputNodes+1)*HiddenNodes))
    return 1
  if (@fEndOutputWeights-@fOutputWeights)/4 <> (HiddenNodes + 1)*OutputNodes
    debug(" Output weight size mis-match ", udec((fEndOutputWeights-fOutputWeights)/4), " ", udec((HiddenNodes + 1)*OutputNodes))
    return 2
  return 0

pub drive_nn(pInput, pOutput) | index, pout
' translate between demo_dual_motor_rc input/output
'   input: 0.0-1.0, lidar detection range (L, FL, F, FR, R)
'   output: -100 to 100, left/right motor speed
' 137-168us with log_w_approx_exp_no_overflow16_clamped sigmoid
  pout := InputToOutput(pInput)                                                 ' input to NN to obtain output

  repeat OutputNodes with index
    long[pOutput][index] := round(long[pout][index] *. 200.0) - 100             ' convert 0 -> +1 to -100 to 100

pri InputToOutput(pfTestInput) : poutput | tempindex, outer
' core of the neutral network
' input nodes are  5: 0.0-1.0 higher number is closer: left/front-left, front, front-right, right
' output nodes are 2: 0.0-1.0 left/right motor 0 is full speed backwards, 0.5 is stopped, 1.0 is full speed forwards
' hidden nodes are 6
'
' cordic operations (1 multiply)*(inputnodes + outputnodes)*hiddennodes
'                   (hiddennodes+outputnode) * sigmoid(4 multiply, 2 divide)
' total approx = (42+32) 74 multiply, 16 divide, ~60us, so 36-44% of excution time
'
  ' Compute hidden layer activations
  ' float HiddenWeights[InputNodes + 1][HiddenNodes]                            ' weight per input node per hidden node
  tempindex := InputNodes*HiddenNodes                                           ' bias is handled as an extra input node
  repeat HiddenNodes with outer
    fHidden[outer] := utilities.sigmoid(utilities.SumMultiply(long[@fHiddenWeights][tempindex++], outer, pfTestInput, @fHiddenWeights, InputNodes, HiddenNodes))                                 ' total per hidden node, curve flattened using logistic function

  ' Compute output layer activations
  ' float OutputWeights[HiddenNodes + 1][OutputNodes];                          ' weight per hidden node per output node
  tempindex := HiddenNodes*OutputNodes                                          ' bias is handled as an extra hidden node
  repeat OutputNodes with outer
    fOutput[outer] := utilities.sigmoid(utilities.SumMultiply(long[@fOutputWeights][tempindex++], outer, @fHidden, @fOutputWeights, HiddenNodes, OutputNodes))                                 ' total per output node, curve flattened using logistic function

  return @fOutput
'
VAR
  byte disp[6]

DAT
lidardisp   byte "L#F#R", 0

PUB updatedisplaylidar(pfin) : result | i
' convert lidar detection into displayable string
  strcopy(@disp, @lidardisp, 5)
  repeat 5 with i
    if long[pfin][i] <. 0.5
      disp[i] := " "
  return @disp

' set of tests that run the Lidar simultated inputs through the neutral network and prints the results
'
DAT
ftestinputs
        long 0.0,  0.0,  0.0,  0.0,  0.0        ' test1
        long 1.0,  1.0,  1.0,  1.0,  1.0        ' test2
        long 0.0,  0.0,  1.0,  0.0,  0.0        ' test3
        long 0.0,  1.0,  1.0,  1.0,  0.0        ' test4
        long 1.0,  0.0,  1.0,  0.0,  1.0        ' test5
        long 1.0,  1.0,  1.0,  0.0,  0.0        ' test6
        long 0.0,  0.0,  1.0,  1.0,  1.0        ' test7
        long 1.0,  1.0,  1.0,  1.0,  0.0        ' test8
        long 0.5,  0.5,  0.5,  0.5,  0.5        ' test9
        long 0.0,  0.0,  0.5,  0.0,  0.0        ' test10
        long 0.25, 0.25, 0.5,  0.25, 0.25       ' test11
        long 0.0,  0.4,  0.5,  0.4,  0.0        ' test12
endftestinputs

pub test_nn() | pftest, nout[2], i, t, clk
' run set of tests on nn
'
  clk := clkfreq/1_000_000
  repeat ((@endftestinputs - @ftestinputs)/(4*5)) with i
    pftest := @long[@ftestinputs][5*i]
    t := getct()
    drive_nn(pftest, @nout)
    t := getct() - t
    debug("test", udec_(i+1), " ", udec_(t/clk), "us lidar=(", zstr_(updatedisplaylidar(pftest)), ") motors= ", sdec_long_array_(@nout, 2))
'
con { license }
{{

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

}}